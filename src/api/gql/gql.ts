/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query getCTA {\n  page(id: \"settings-dww-2025\", idType: URI) {\n    title\n    cta {\n      en {\n        header\n        text\n        buttonEnabled\n        buttonLink\n        buttonText\n      }\n      ru {\n        header\n        text\n        buttonEnabled\n        buttonLink\n        buttonText\n      }\n    }\n  }\n}": typeof types.GetCtaDocument,
    "query GetGalleryBySlug($slug: ID!) {\n  gallery(id: $slug, idType: SLUG) {\n    galleryImagesGroup {\n      images(first: 1000) {\n        nodes {\n          caption(format: RENDERED)\n          altText\n          large: sourceUrl\n          small: sourceUrl(size: THUMBNAIL)\n          title\n        }\n      }\n    }\n  }\n}": typeof types.GetGalleryBySlugDocument,
    "query GetPageByUri($uri: ID!) {\n  page(id: $uri, idType: URI) {\n    title\n    featuredImage {\n      node {\n        sourceUrl\n      }\n    }\n    content(format: RENDERED)\n  }\n}": typeof types.GetPageByUriDocument,
    "query getPostBySlug($id: ID!) {\n  post(id: $id, idType: SLUG) {\n    content(format: RENDERED)\n    title\n  }\n}": typeof types.GetPostBySlugDocument,
    "query getPosts {\n  posts {\n    nodes {\n      id\n      title\n      content(format: RENDERED)\n      slug\n    }\n  }\n}": typeof types.GetPostsDocument,
    "query getSettings {\n  page(id: \"settings-dww-2025\", idType: URI) {\n    title\n    settingsdww25 {\n      price {\n        promoPeriod {\n          isLivePromo\n          price {\n            live\n          }\n          ru\n          en\n          singlews {\n            group1 {\n              names\n              price\n            }\n            group2 {\n              names\n              price\n            }\n          }\n        }\n        promoPeriodDev {\n          isLivePromo\n          price {\n            live\n          }\n          ru\n          en\n          singlews {\n            group1 {\n              names\n              price\n            }\n            group2 {\n              names\n              price\n            }\n          }\n        }\n        periods {\n          pricePeriod1 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n          pricePeriod2 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n          pricePeriod3 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n        }\n        contest {\n          contestsoloprice {\n            kids\n            professionals\n            risingstar\n            soloPassKids\n            soloPassProfessionals\n            soloPassRisingStar\n          }\n          contestsolopricewithoutfullpass {\n            kids\n            professionals\n            risingstar\n            soloPassKids\n            soloPassProfessionals\n            soloPassRisingStar\n          }\n          from\n          version\n          contestGroupPrice\n        }\n        worldShow {\n          solofullpass\n          solowithoutfullpass\n          groups\n        }\n      }\n      registrationState {\n        isLiveOpen\n        isLiveOpenDev\n        isOnlineOpen\n        isOnlineOpenDev\n      }\n    }\n  }\n}": typeof types.GetSettingsDocument,
};
const documents: Documents = {
    "query getCTA {\n  page(id: \"settings-dww-2025\", idType: URI) {\n    title\n    cta {\n      en {\n        header\n        text\n        buttonEnabled\n        buttonLink\n        buttonText\n      }\n      ru {\n        header\n        text\n        buttonEnabled\n        buttonLink\n        buttonText\n      }\n    }\n  }\n}": types.GetCtaDocument,
    "query GetGalleryBySlug($slug: ID!) {\n  gallery(id: $slug, idType: SLUG) {\n    galleryImagesGroup {\n      images(first: 1000) {\n        nodes {\n          caption(format: RENDERED)\n          altText\n          large: sourceUrl\n          small: sourceUrl(size: THUMBNAIL)\n          title\n        }\n      }\n    }\n  }\n}": types.GetGalleryBySlugDocument,
    "query GetPageByUri($uri: ID!) {\n  page(id: $uri, idType: URI) {\n    title\n    featuredImage {\n      node {\n        sourceUrl\n      }\n    }\n    content(format: RENDERED)\n  }\n}": types.GetPageByUriDocument,
    "query getPostBySlug($id: ID!) {\n  post(id: $id, idType: SLUG) {\n    content(format: RENDERED)\n    title\n  }\n}": types.GetPostBySlugDocument,
    "query getPosts {\n  posts {\n    nodes {\n      id\n      title\n      content(format: RENDERED)\n      slug\n    }\n  }\n}": types.GetPostsDocument,
    "query getSettings {\n  page(id: \"settings-dww-2025\", idType: URI) {\n    title\n    settingsdww25 {\n      price {\n        promoPeriod {\n          isLivePromo\n          price {\n            live\n          }\n          ru\n          en\n          singlews {\n            group1 {\n              names\n              price\n            }\n            group2 {\n              names\n              price\n            }\n          }\n        }\n        promoPeriodDev {\n          isLivePromo\n          price {\n            live\n          }\n          ru\n          en\n          singlews {\n            group1 {\n              names\n              price\n            }\n            group2 {\n              names\n              price\n            }\n          }\n        }\n        periods {\n          pricePeriod1 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n          pricePeriod2 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n          pricePeriod3 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n        }\n        contest {\n          contestsoloprice {\n            kids\n            professionals\n            risingstar\n            soloPassKids\n            soloPassProfessionals\n            soloPassRisingStar\n          }\n          contestsolopricewithoutfullpass {\n            kids\n            professionals\n            risingstar\n            soloPassKids\n            soloPassProfessionals\n            soloPassRisingStar\n          }\n          from\n          version\n          contestGroupPrice\n        }\n        worldShow {\n          solofullpass\n          solowithoutfullpass\n          groups\n        }\n      }\n      registrationState {\n        isLiveOpen\n        isLiveOpenDev\n        isOnlineOpen\n        isOnlineOpenDev\n      }\n    }\n  }\n}": types.GetSettingsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getCTA {\n  page(id: \"settings-dww-2025\", idType: URI) {\n    title\n    cta {\n      en {\n        header\n        text\n        buttonEnabled\n        buttonLink\n        buttonText\n      }\n      ru {\n        header\n        text\n        buttonEnabled\n        buttonLink\n        buttonText\n      }\n    }\n  }\n}"): (typeof documents)["query getCTA {\n  page(id: \"settings-dww-2025\", idType: URI) {\n    title\n    cta {\n      en {\n        header\n        text\n        buttonEnabled\n        buttonLink\n        buttonText\n      }\n      ru {\n        header\n        text\n        buttonEnabled\n        buttonLink\n        buttonText\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetGalleryBySlug($slug: ID!) {\n  gallery(id: $slug, idType: SLUG) {\n    galleryImagesGroup {\n      images(first: 1000) {\n        nodes {\n          caption(format: RENDERED)\n          altText\n          large: sourceUrl\n          small: sourceUrl(size: THUMBNAIL)\n          title\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetGalleryBySlug($slug: ID!) {\n  gallery(id: $slug, idType: SLUG) {\n    galleryImagesGroup {\n      images(first: 1000) {\n        nodes {\n          caption(format: RENDERED)\n          altText\n          large: sourceUrl\n          small: sourceUrl(size: THUMBNAIL)\n          title\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetPageByUri($uri: ID!) {\n  page(id: $uri, idType: URI) {\n    title\n    featuredImage {\n      node {\n        sourceUrl\n      }\n    }\n    content(format: RENDERED)\n  }\n}"): (typeof documents)["query GetPageByUri($uri: ID!) {\n  page(id: $uri, idType: URI) {\n    title\n    featuredImage {\n      node {\n        sourceUrl\n      }\n    }\n    content(format: RENDERED)\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getPostBySlug($id: ID!) {\n  post(id: $id, idType: SLUG) {\n    content(format: RENDERED)\n    title\n  }\n}"): (typeof documents)["query getPostBySlug($id: ID!) {\n  post(id: $id, idType: SLUG) {\n    content(format: RENDERED)\n    title\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getPosts {\n  posts {\n    nodes {\n      id\n      title\n      content(format: RENDERED)\n      slug\n    }\n  }\n}"): (typeof documents)["query getPosts {\n  posts {\n    nodes {\n      id\n      title\n      content(format: RENDERED)\n      slug\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getSettings {\n  page(id: \"settings-dww-2025\", idType: URI) {\n    title\n    settingsdww25 {\n      price {\n        promoPeriod {\n          isLivePromo\n          price {\n            live\n          }\n          ru\n          en\n          singlews {\n            group1 {\n              names\n              price\n            }\n            group2 {\n              names\n              price\n            }\n          }\n        }\n        promoPeriodDev {\n          isLivePromo\n          price {\n            live\n          }\n          ru\n          en\n          singlews {\n            group1 {\n              names\n              price\n            }\n            group2 {\n              names\n              price\n            }\n          }\n        }\n        periods {\n          pricePeriod1 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n          pricePeriod2 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n          pricePeriod3 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n        }\n        contest {\n          contestsoloprice {\n            kids\n            professionals\n            risingstar\n            soloPassKids\n            soloPassProfessionals\n            soloPassRisingStar\n          }\n          contestsolopricewithoutfullpass {\n            kids\n            professionals\n            risingstar\n            soloPassKids\n            soloPassProfessionals\n            soloPassRisingStar\n          }\n          from\n          version\n          contestGroupPrice\n        }\n        worldShow {\n          solofullpass\n          solowithoutfullpass\n          groups\n        }\n      }\n      registrationState {\n        isLiveOpen\n        isLiveOpenDev\n        isOnlineOpen\n        isOnlineOpenDev\n      }\n    }\n  }\n}"): (typeof documents)["query getSettings {\n  page(id: \"settings-dww-2025\", idType: URI) {\n    title\n    settingsdww25 {\n      price {\n        promoPeriod {\n          isLivePromo\n          price {\n            live\n          }\n          ru\n          en\n          singlews {\n            group1 {\n              names\n              price\n            }\n            group2 {\n              names\n              price\n            }\n          }\n        }\n        promoPeriodDev {\n          isLivePromo\n          price {\n            live\n          }\n          ru\n          en\n          singlews {\n            group1 {\n              names\n              price\n            }\n            group2 {\n              names\n              price\n            }\n          }\n        }\n        periods {\n          pricePeriod1 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n          pricePeriod2 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n          pricePeriod3 {\n            start\n            end\n            price {\n              live\n            }\n            singlews {\n              group1 {\n                names\n                price\n              }\n              group2 {\n                names\n                price\n              }\n            }\n          }\n        }\n        contest {\n          contestsoloprice {\n            kids\n            professionals\n            risingstar\n            soloPassKids\n            soloPassProfessionals\n            soloPassRisingStar\n          }\n          contestsolopricewithoutfullpass {\n            kids\n            professionals\n            risingstar\n            soloPassKids\n            soloPassProfessionals\n            soloPassRisingStar\n          }\n          from\n          version\n          contestGroupPrice\n        }\n        worldShow {\n          solofullpass\n          solowithoutfullpass\n          groups\n        }\n      }\n      registrationState {\n        isLiveOpen\n        isLiveOpenDev\n        isOnlineOpen\n        isOnlineOpenDev\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;